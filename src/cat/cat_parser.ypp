%skeleton "lalr1.cc" // -*- C++ -*-
%require "3.2"

// %define api.token.raw
%define api.token.constructor
%define api.token.prefix {TOK_}
%define api.value.type variant
%define parse.assert
%define parse.trace
%locations

%code requires {
  #include <string>
  #include <memory>
  #include "cat_type.h"
  class cat_parsing_drivert;
  extern char *current_line;
  extern void reset_current_line();
}

%param { cat_parsing_drivert& drv }

%code {
 /*
  * KATER -- Automating Weak Memory Model Metatheory
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, you can access it online at
  * http://www.gnu.org/licenses/gpl-3.0.html.
  */

  #include "cat_parsing_driver.h"
  #include "cat_type.h"
  #include <iostream>
  #include <memory>
  #include <unordered_map>
  #include <vector>
}


%token
  ACYCLIC   "acyclic"
  IRREFLEXIVE   "irreflexive"
  DECLARE   "declare"
  DECLARE_LOC "declare-loc"
  EMPTY	    "empty"
  ERROR	    "error"
  ID_REL    "id"
  AS        "as"   
  INCLUDE   "include"
  LET	    "let"
  ROT       "rot"
  INT		"int"
  EXT		"ext"
  SAVE      "save"
  TOTAL     "total"
  VIEW      "view"
  WARNING   "warning"
  EQ		"="
  DCOLON    "::"
  COMMA     ","
  ZERO      "0"
  MONE      "-1"
  SEMI      ";"
  AND       "&"
  ALT       "|"
  BSLASH    "\\"
  PLUS      "+"
  TIMES      "*"
  QMARK     "?"
  LPAREN    "("
  RPAREN    ")"
  LBRACK    "["
  RBRACK    "]"
  SUPER     "^"
;

%token YYEOF 0

%token <std::string> ID;
%token <std::string> QPATH;
%nterm <std::string> qualified_ID;
%nterm <cat_relationt> rel;
%nterm <cat_axiomt> constraint;
/* %nterm <std::string> reduce_opt; */

%precedence "="
%left  "|"
%left  "\\" "&"
%left  ";"
%precedence "+" "*" "?" "^"
%precedence "rot"
/* 
%printer { yyo << *($$); } <std::unique_ptr<cat_relationt>>;
%printer { yyo << *($$); } <std::unique_ptr<cat_axiomt>>;
%printer { yyo << $$; } <*>; */

%start main
%%

main:	  %empty		{ }
	| main decl		{ }
        ;

decl:     "include" QPATH                  { }
	| "let" ID "=" rel                 { drv.registerID($2, std::move($4)); }
	/* | "declare" ID                     { drv.registerID($2, CharRE::create(
								    TransLabel(Relation::createUser()))); }
	| "declare-loc" ID                 { auto r = Relation::createUser();
	                      		     auto rloc = Relation::createUser();
					     rloc.markAsPerLocOf(r);
					     drv.registerID($2, CharRE::create(TransLabel(r)));
					     drv.registerID($2 + "-loc", CharRE::create(TransLabel(rloc))); }
	| "save" reduce_opt ID "=" rel     { drv.registerSaveID($3, $2, std::move($5), @$); }
	| "view" ID "=" rel		   { drv.registerViewID($2, std::move($4)); } */
	| constraint			   { drv.addConstraint(std::move($1), "", @$); }
	;

qualified_ID: ID        { $$ = $1; }
	| ID "::" ID    { $$ = $1 + "::" + $3; }
	;

constraint:	"empty" rel		{ $$ = cat_axiomt(rel_axiomt::EMPTY, std::move($2)); }
	| "acyclic" rel		{ $$ = cat_axiomt(rel_axiomt::ACYCLIC, std::move($2)); }
	| "irreflexive" rel	{ $$ = cat_axiomt(rel_axiomt::IRREFLEXIVE, std::move($2)); }
  | "empty" rel	"as" ID	{ $$ = cat_axiomt(rel_axiomt::EMPTY, std::move($2)); }
	| "acyclic" rel	"as" ID	{ $$ = cat_axiomt(rel_axiomt::ACYCLIC, std::move($2)); }
	| "irreflexive" rel "as" ID	{ $$ = cat_axiomt(rel_axiomt::IRREFLEXIVE, std::move($2)); }
	;

rel:	"id"			{ $$ = cat_relationt("id"); }
	| qualified_ID		{ $$ = cat_relationt($1); }
	| "(" rel ")"		{ $$ = std::move($2); }
	| "[" rel "]"		{ $$ = cat_relationt(rel_opt::BRACKET, std::move($2)); }
	| "[" "]"		{ $$ = cat_relationt("id"); }
	| rel "|" rel		{ $$ = cat_relationt(rel_opt::ALT, std::move($1), std::move($3)); }
	| rel ";" rel		{ $$ = cat_relationt(rel_opt::SEQ, std::move($1), std::move($3)); }
	| rel "&" rel		{ $$ = cat_relationt(rel_opt::AND, std::move($1), std::move($3)); }
	| rel "\\" rel	{ $$ = cat_relationt(rel_opt::MINUS, std::move($1), std::move($3)); }
	| rel "*" rel		{ $$ = cat_relationt(rel_opt::TIMES, std::move($1), std::move($3)); }
	| rel "+"		{ $$ = cat_relationt(rel_opt::PLUS, std::move($1)); }
  | rel "*"   { $$ = cat_relationt(rel_opt::STAR, std::move($1)); }
	| rel "?"		{ $$ = cat_relationt(rel_opt::QMARK, std::move($1)); }
	| "rot" rel		{ $$ = cat_relationt(rel_opt::ROT, std::move($2)); }
	| "int" rel		{ $$ = cat_relationt(rel_opt::INT, std::move($2)); }
	| "ext" rel		{ $$ = cat_relationt(rel_opt::EXT, std::move($2)); }
	| rel "^" "-1" 		{ $$ = cat_relationt(rel_opt::FLIP, std::move($1)); }
	;

%%

void yy::parser::error(const location_type &l, const std::string &m)
{
	std::cerr << "\n" << l << ": " << m << "\n";
}

/* void yy::parser::report_syntax_error(const yy::parser::context &ctx) const
{
	std::cerr << ctx.location() << ": error";

	{
		enum { TOKENMAX = 5 };
		symbol_kind_type expected[TOKENMAX];

		auto n = ctx.expected_tokens(expected, TOKENMAX);
		for (auto i = 0; i < n; i++)
			std::cerr << (i == 0 ? ": expected \'" : "\' or \'") << symbol_name(expected[i]);
		if (n > 0)
			std::cerr << "\'";
	}

	{
		auto lookahead = ctx.token();
		if (lookahead != symbol_kind::S_YYEMPTY)
			std::cerr << " before \'" << symbol_name (lookahead) << "\'";
	}

	std::cerr << '\n';

	{
		auto &loc = ctx.location();
		std::cerr << current_line;
		for (auto i = 0; i < loc.begin.column-1; i++)
			std::cerr << " ";
		std::cerr << "^";
		for (auto i = loc.begin.column+1; i < loc.end.column; i++)
			std::cerr << "~";
		std::cerr << "\n";
		reset_current_line();
	}
} */
