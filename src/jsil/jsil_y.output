终端机在文法中未使用

    TOK_SCANNER_ERROR


语法

    0 $accept: program $end

    1 program: procedure_decls

    2 procedure_decls: procedure_decl
    3                | procedure_decls procedure_decl

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    5 proc_ident: TOK_IDENTIFIER
    6           | "eval"
    7           | TOK_BUILTIN_IDENTIFIER
    8           | TOK_SPEC_IDENTIFIER

    9 proc_ident_expr: proc_ident
   10                | TOK_STRING

   11 parameters_opt: %empty
   12               | parameters

   13 parameters: TOK_IDENTIFIER
   14           | parameters ',' TOK_IDENTIFIER

   15 statements_opt: %empty
   16               | statements

   17 statements: statement
   18           | statements statement

   19 statement: "<newline>"
   20          | instruction "<newline>"

   21 instruction: "label" TOK_IDENTIFIER
   22            | "goto" TOK_IDENTIFIER
   23            | "goto" '[' expression ']' TOK_IDENTIFIER ',' TOK_IDENTIFIER
   24            | "skip"
   25            | TOK_IDENTIFIER ":=" rhs
   26            | '[' expression ',' expression ']' ":=" expression

   27 rhs: expression
   28    | proc_ident_expr '(' expressions_opt ')' with_opt
   29    | "new" '(' ')'
   30    | "hasField" '(' expression ',' expression ')'
   31    | '[' expression ',' expression ']'
   32    | "delete" '(' expression ',' expression ')'
   33    | "protoField" '(' expression ',' expression ')'
   34    | "protoObj" '(' expression ',' expression ')'

   35 with_opt: %empty
   36         | "with" TOK_IDENTIFIER

   37 expressions_opt: %empty
   38                | expressions

   39 expressions: expression
   40            | expressions ',' expression

   41 expression: atom_expression
   42           | expression binary_op atom_expression

   43 atom_expression: literal
   44                | unary_op atom_expression
   45                | '(' expression ')'
   46                | "ref" '(' expression ',' expression ',' ref_type ')'
   47                | "field" '(' expression ')'
   48                | "base" '(' expression ')'
   49                | "typeOf" '(' expression ')'

   50 literal: TOK_IDENTIFIER
   51        | "null"
   52        | "#undefined"
   53        | "#empty"
   54        | "true"
   55        | "false"
   56        | TOK_FLOATING
   57        | TOK_STRING
   58        | TOK_BUILTIN_LOC
   59        | jsil_type
   60        | builtin_field

   61 builtin_field: "#proto"
   62              | "#fid"
   63              | "#scope"
   64              | "#constructid"
   65              | "#primvalue"
   66              | "#targetfunction"
   67              | "#class"

   68 binary_op: compare_op
   69          | arithmetic_op
   70          | boolean_op
   71          | bitwise_op

   72 compare_op: '='
   73           | '<'
   74           | "<="

   75 arithmetic_op: '+'
   76              | '-'
   77              | '*'
   78              | '/'
   79              | '%'

   80 boolean_op: "and"
   81           | "or"
   82           | "<:"
   83           | ':'

   84 bitwise_op: '&'
   85           | '|'
   86           | '^'
   87           | "<<"
   88           | ">>"
   89           | ">>>"

   90 unary_op: "not"
   91         | '-'
   92         | "num_to_string"
   93         | "string_to_num"
   94         | "num_to_int32"
   95         | "num_to_uint32"
   96         | '!'

   97 jsil_type: "#Null"
   98          | "#Undefined"
   99          | "#Boolean"
  100          | "#String"
  101          | "#Number"
  102          | "#BuiltinObject"
  103          | "#UserObject"
  104          | "#Object"
  105          | ref_type
  106          | "#Reference"

  107 ref_type: "#MemberReference"
  108         | "#VariableReference"


终结语词，附有它们出现处的规则

    $end (0) 0
    '!' (33) 96
    '%' (37) 79
    '&' (38) 84
    '(' (40) 4 28 29 30 32 33 34 45 46 47 48 49
    ')' (41) 4 28 29 30 32 33 34 45 46 47 48 49
    '*' (42) 77
    '+' (43) 75
    ',' (44) 14 23 26 30 31 32 33 34 40 46
    '-' (45) 76 91
    '/' (47) 78
    ':' (58) 83
    '<' (60) 73
    '=' (61) 72
    '[' (91) 23 26 31
    ']' (93) 23 26 31
    '^' (94) 86
    '{' (123) 4
    '|' (124) 85
    '}' (125) 4
    error (256)
    TOK_SCANNER_ERROR (258)
    "<newline>" (259) 19 20
    "procedure" (260) 4
    "returns" (261) 4
    "to" (262) 4
    "throws" (263) 4
    "eval" (264) 6
    "label" (265) 21
    "goto" (266) 22 23
    "skip" (267) 24
    "with" (268) 36
    "new" (269) 29
    "hasField" (270) 30
    "delete" (271) 32
    "protoField" (272) 33
    "protoObj" (273) 34
    "ref" (274) 46
    "field" (275) 47
    "base" (276) 48
    "typeOf" (277) 49
    "null" (278) 51
    "#undefined" (279) 52
    "#empty" (280) 53
    "true" (281) 54
    "false" (282) 55
    "#proto" (283) 61
    "#fid" (284) 62
    "#scope" (285) 63
    "#constructid" (286) 64
    "#primvalue" (287) 65
    "#targetfunction" (288) 66
    "#class" (289) 67
    "num_to_string" (290) 92
    "string_to_num" (291) 93
    "num_to_int32" (292) 94
    "num_to_uint32" (293) 95
    "#MemberReference" (294) 107
    "#VariableReference" (295) 108
    "#Null" (296) 97
    "#Undefined" (297) 98
    "#Boolean" (298) 99
    "#String" (299) 100
    "#Number" (300) 101
    "#BuiltinObject" (301) 102
    "#UserObject" (302) 103
    "#Object" (303) 104
    "#Reference" (304) 106
    ":=" (305) 25 26
    "<=" (306) 74
    "and" (307) 80
    "or" (308) 81
    "<:" (309) 82
    "<<" (310) 87
    ">>" (311) 88
    ">>>" (312) 89
    "not" (313) 90
    TOK_IDENTIFIER (314) 4 5 13 14 21 22 23 25 36 50
    TOK_FLOATING (315) 56
    TOK_STRING (316) 10 57
    TOK_BUILTIN_LOC (317) 58
    TOK_BUILTIN_IDENTIFIER (318) 7
    TOK_SPEC_IDENTIFIER (319) 8


非终结语词，附有它们出现处的规则

    $accept (84)
        on left: 0
    program (85)
        on left: 1
        on right: 0
    procedure_decls (86)
        on left: 2 3
        on right: 1 3
    procedure_decl (87)
        on left: 4
        on right: 2 3
    proc_ident (88)
        on left: 5 6 7 8
        on right: 4 9
    proc_ident_expr (89)
        on left: 9 10
        on right: 28
    parameters_opt (90)
        on left: 11 12
        on right: 4
    parameters (91)
        on left: 13 14
        on right: 12 14
    statements_opt (92)
        on left: 15 16
        on right: 4
    statements (93)
        on left: 17 18
        on right: 16 18
    statement (94)
        on left: 19 20
        on right: 17 18
    instruction (95)
        on left: 21 22 23 24 25 26
        on right: 20
    rhs (96)
        on left: 27 28 29 30 31 32 33 34
        on right: 25
    with_opt (97)
        on left: 35 36
        on right: 28
    expressions_opt (98)
        on left: 37 38
        on right: 28
    expressions (99)
        on left: 39 40
        on right: 38 40
    expression (100)
        on left: 41 42
        on right: 23 26 27 30 31 32 33 34 39 40 42 45 46 47 48 49
    atom_expression (101)
        on left: 43 44 45 46 47 48 49
        on right: 41 42 44
    literal (102)
        on left: 50 51 52 53 54 55 56 57 58 59 60
        on right: 43
    builtin_field (103)
        on left: 61 62 63 64 65 66 67
        on right: 60
    binary_op (104)
        on left: 68 69 70 71
        on right: 42
    compare_op (105)
        on left: 72 73 74
        on right: 68
    arithmetic_op (106)
        on left: 75 76 77 78 79
        on right: 69
    boolean_op (107)
        on left: 80 81 82 83
        on right: 70
    bitwise_op (108)
        on left: 84 85 86 87 88 89
        on right: 71
    unary_op (109)
        on left: 90 91 92 93 94 95 96
        on right: 44
    jsil_type (110)
        on left: 97 98 99 100 101 102 103 104 105 106
        on right: 59
    ref_type (111)
        on left: 107 108
        on right: 46 105


状态 0

    0 $accept: . program $end

    "procedure"  偏移，并进入状态 1

    program          转到状态 2
    procedure_decls  转到状态 3
    procedure_decl   转到状态 4


状态 1

    4 procedure_decl: "procedure" . proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    "eval"                  偏移，并进入状态 5
    TOK_IDENTIFIER          偏移，并进入状态 6
    TOK_BUILTIN_IDENTIFIER  偏移，并进入状态 7
    TOK_SPEC_IDENTIFIER     偏移，并进入状态 8

    proc_ident  转到状态 9


状态 2

    0 $accept: program . $end

    $end  偏移，并进入状态 10


状态 3

    1 program: procedure_decls .
    3 procedure_decls: procedure_decls . procedure_decl

    "procedure"  偏移，并进入状态 1

    $default  使用规则 1 以归约 (program)

    procedure_decl  转到状态 11


状态 4

    2 procedure_decls: procedure_decl .

    $default  使用规则 2 以归约 (procedure_decls)


状态 5

    6 proc_ident: "eval" .

    $default  使用规则 6 以归约 (proc_ident)


状态 6

    5 proc_ident: TOK_IDENTIFIER .

    $default  使用规则 5 以归约 (proc_ident)


状态 7

    7 proc_ident: TOK_BUILTIN_IDENTIFIER .

    $default  使用规则 7 以归约 (proc_ident)


状态 8

    8 proc_ident: TOK_SPEC_IDENTIFIER .

    $default  使用规则 8 以归约 (proc_ident)


状态 9

    4 procedure_decl: "procedure" proc_ident . '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    '('  偏移，并进入状态 12


状态 10

    0 $accept: program $end .

    $default  接受


状态 11

    3 procedure_decls: procedure_decls procedure_decl .

    $default  使用规则 3 以归约 (procedure_decls)


状态 12

    4 procedure_decl: "procedure" proc_ident '(' . parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    TOK_IDENTIFIER  偏移，并进入状态 13

    $default  使用规则 11 以归约 (parameters_opt)

    parameters_opt  转到状态 14
    parameters      转到状态 15


状态 13

   13 parameters: TOK_IDENTIFIER .

    $default  使用规则 13 以归约 (parameters)


状态 14

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt . ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    ')'  偏移，并进入状态 16


状态 15

   12 parameters_opt: parameters .
   14 parameters: parameters . ',' TOK_IDENTIFIER

    ','  偏移，并进入状态 17

    $default  使用规则 12 以归约 (parameters_opt)


状态 16

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' . "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    "returns"  偏移，并进入状态 18


状态 17

   14 parameters: parameters ',' . TOK_IDENTIFIER

    TOK_IDENTIFIER  偏移，并进入状态 19


状态 18

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" . TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    TOK_IDENTIFIER  偏移，并进入状态 20


状态 19

   14 parameters: parameters ',' TOK_IDENTIFIER .

    $default  使用规则 14 以归约 (parameters)


状态 20

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER . "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    "to"  偏移，并进入状态 21


状态 21

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" . TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    TOK_IDENTIFIER  偏移，并进入状态 22


状态 22

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER . "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    "throws"  偏移，并进入状态 23


状态 23

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" . TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}'

    TOK_IDENTIFIER  偏移，并进入状态 24


状态 24

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER . "to" TOK_IDENTIFIER '{' statements_opt '}'

    "to"  偏移，并进入状态 25


状态 25

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" . TOK_IDENTIFIER '{' statements_opt '}'

    TOK_IDENTIFIER  偏移，并进入状态 26


状态 26

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER . '{' statements_opt '}'

    '{'  偏移，并进入状态 27


状态 27

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' . statements_opt '}'

    "<newline>"     偏移，并进入状态 28
    "label"         偏移，并进入状态 29
    "goto"          偏移，并进入状态 30
    "skip"          偏移，并进入状态 31
    TOK_IDENTIFIER  偏移，并进入状态 32
    '['             偏移，并进入状态 33

    $default  使用规则 15 以归约 (statements_opt)

    statements_opt  转到状态 34
    statements      转到状态 35
    statement       转到状态 36
    instruction     转到状态 37


状态 28

   19 statement: "<newline>" .

    $default  使用规则 19 以归约 (statement)


状态 29

   21 instruction: "label" . TOK_IDENTIFIER

    TOK_IDENTIFIER  偏移，并进入状态 38


状态 30

   22 instruction: "goto" . TOK_IDENTIFIER
   23            | "goto" . '[' expression ']' TOK_IDENTIFIER ',' TOK_IDENTIFIER

    TOK_IDENTIFIER  偏移，并进入状态 39
    '['             偏移，并进入状态 40


状态 31

   24 instruction: "skip" .

    $default  使用规则 24 以归约 (instruction)


状态 32

   25 instruction: TOK_IDENTIFIER . ":=" rhs

    ":="  偏移，并进入状态 41


状态 33

   26 instruction: '[' . expression ',' expression ']' ":=" expression

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 81
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 34

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt . '}'

    '}'  偏移，并进入状态 88


状态 35

   16 statements_opt: statements .
   18 statements: statements . statement

    "<newline>"     偏移，并进入状态 28
    "label"         偏移，并进入状态 29
    "goto"          偏移，并进入状态 30
    "skip"          偏移，并进入状态 31
    TOK_IDENTIFIER  偏移，并进入状态 32
    '['             偏移，并进入状态 33

    $default  使用规则 16 以归约 (statements_opt)

    statement    转到状态 89
    instruction  转到状态 37


状态 36

   17 statements: statement .

    $default  使用规则 17 以归约 (statements)


状态 37

   20 statement: instruction . "<newline>"

    "<newline>"  偏移，并进入状态 90


状态 38

   21 instruction: "label" TOK_IDENTIFIER .

    $default  使用规则 21 以归约 (instruction)


状态 39

   22 instruction: "goto" TOK_IDENTIFIER .

    $default  使用规则 22 以归约 (instruction)


状态 40

   23 instruction: "goto" '[' . expression ']' TOK_IDENTIFIER ',' TOK_IDENTIFIER

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 91
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 41

   25 instruction: TOK_IDENTIFIER ":=" . rhs

    "eval"                  偏移，并进入状态 5
    "new"                   偏移，并进入状态 92
    "hasField"              偏移，并进入状态 93
    "delete"                偏移，并进入状态 94
    "protoField"            偏移，并进入状态 95
    "protoObj"              偏移，并进入状态 96
    "ref"                   偏移，并进入状态 42
    "field"                 偏移，并进入状态 43
    "base"                  偏移，并进入状态 44
    "typeOf"                偏移，并进入状态 45
    "null"                  偏移，并进入状态 46
    "#undefined"            偏移，并进入状态 47
    "#empty"                偏移，并进入状态 48
    "true"                  偏移，并进入状态 49
    "false"                 偏移，并进入状态 50
    "#proto"                偏移，并进入状态 51
    "#fid"                  偏移，并进入状态 52
    "#scope"                偏移，并进入状态 53
    "#constructid"          偏移，并进入状态 54
    "#primvalue"            偏移，并进入状态 55
    "#targetfunction"       偏移，并进入状态 56
    "#class"                偏移，并进入状态 57
    "num_to_string"         偏移，并进入状态 58
    "string_to_num"         偏移，并进入状态 59
    "num_to_int32"          偏移，并进入状态 60
    "num_to_uint32"         偏移，并进入状态 61
    "#MemberReference"      偏移，并进入状态 62
    "#VariableReference"    偏移，并进入状态 63
    "#Null"                 偏移，并进入状态 64
    "#Undefined"            偏移，并进入状态 65
    "#Boolean"              偏移，并进入状态 66
    "#String"               偏移，并进入状态 67
    "#Number"               偏移，并进入状态 68
    "#BuiltinObject"        偏移，并进入状态 69
    "#UserObject"           偏移，并进入状态 70
    "#Object"               偏移，并进入状态 71
    "#Reference"            偏移，并进入状态 72
    "not"                   偏移，并进入状态 73
    TOK_IDENTIFIER          偏移，并进入状态 97
    TOK_FLOATING            偏移，并进入状态 75
    TOK_STRING              偏移，并进入状态 98
    TOK_BUILTIN_LOC         偏移，并进入状态 77
    TOK_BUILTIN_IDENTIFIER  偏移，并进入状态 7
    TOK_SPEC_IDENTIFIER     偏移，并进入状态 8
    '('                     偏移，并进入状态 78
    '['                     偏移，并进入状态 99
    '-'                     偏移，并进入状态 79
    '!'                     偏移，并进入状态 80

    proc_ident       转到状态 100
    proc_ident_expr  转到状态 101
    rhs              转到状态 102
    expression       转到状态 103
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 42

   46 atom_expression: "ref" . '(' expression ',' expression ',' ref_type ')'

    '('  偏移，并进入状态 104


状态 43

   47 atom_expression: "field" . '(' expression ')'

    '('  偏移，并进入状态 105


状态 44

   48 atom_expression: "base" . '(' expression ')'

    '('  偏移，并进入状态 106


状态 45

   49 atom_expression: "typeOf" . '(' expression ')'

    '('  偏移，并进入状态 107


状态 46

   51 literal: "null" .

    $default  使用规则 51 以归约 (literal)


状态 47

   52 literal: "#undefined" .

    $default  使用规则 52 以归约 (literal)


状态 48

   53 literal: "#empty" .

    $default  使用规则 53 以归约 (literal)


状态 49

   54 literal: "true" .

    $default  使用规则 54 以归约 (literal)


状态 50

   55 literal: "false" .

    $default  使用规则 55 以归约 (literal)


状态 51

   61 builtin_field: "#proto" .

    $default  使用规则 61 以归约 (builtin_field)


状态 52

   62 builtin_field: "#fid" .

    $default  使用规则 62 以归约 (builtin_field)


状态 53

   63 builtin_field: "#scope" .

    $default  使用规则 63 以归约 (builtin_field)


状态 54

   64 builtin_field: "#constructid" .

    $default  使用规则 64 以归约 (builtin_field)


状态 55

   65 builtin_field: "#primvalue" .

    $default  使用规则 65 以归约 (builtin_field)


状态 56

   66 builtin_field: "#targetfunction" .

    $default  使用规则 66 以归约 (builtin_field)


状态 57

   67 builtin_field: "#class" .

    $default  使用规则 67 以归约 (builtin_field)


状态 58

   92 unary_op: "num_to_string" .

    $default  使用规则 92 以归约 (unary_op)


状态 59

   93 unary_op: "string_to_num" .

    $default  使用规则 93 以归约 (unary_op)


状态 60

   94 unary_op: "num_to_int32" .

    $default  使用规则 94 以归约 (unary_op)


状态 61

   95 unary_op: "num_to_uint32" .

    $default  使用规则 95 以归约 (unary_op)


状态 62

  107 ref_type: "#MemberReference" .

    $default  使用规则 107 以归约 (ref_type)


状态 63

  108 ref_type: "#VariableReference" .

    $default  使用规则 108 以归约 (ref_type)


状态 64

   97 jsil_type: "#Null" .

    $default  使用规则 97 以归约 (jsil_type)


状态 65

   98 jsil_type: "#Undefined" .

    $default  使用规则 98 以归约 (jsil_type)


状态 66

   99 jsil_type: "#Boolean" .

    $default  使用规则 99 以归约 (jsil_type)


状态 67

  100 jsil_type: "#String" .

    $default  使用规则 100 以归约 (jsil_type)


状态 68

  101 jsil_type: "#Number" .

    $default  使用规则 101 以归约 (jsil_type)


状态 69

  102 jsil_type: "#BuiltinObject" .

    $default  使用规则 102 以归约 (jsil_type)


状态 70

  103 jsil_type: "#UserObject" .

    $default  使用规则 103 以归约 (jsil_type)


状态 71

  104 jsil_type: "#Object" .

    $default  使用规则 104 以归约 (jsil_type)


状态 72

  106 jsil_type: "#Reference" .

    $default  使用规则 106 以归约 (jsil_type)


状态 73

   90 unary_op: "not" .

    $default  使用规则 90 以归约 (unary_op)


状态 74

   50 literal: TOK_IDENTIFIER .

    $default  使用规则 50 以归约 (literal)


状态 75

   56 literal: TOK_FLOATING .

    $default  使用规则 56 以归约 (literal)


状态 76

   57 literal: TOK_STRING .

    $default  使用规则 57 以归约 (literal)


状态 77

   58 literal: TOK_BUILTIN_LOC .

    $default  使用规则 58 以归约 (literal)


状态 78

   45 atom_expression: '(' . expression ')'

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 108
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 79

   91 unary_op: '-' .

    $default  使用规则 91 以归约 (unary_op)


状态 80

   96 unary_op: '!' .

    $default  使用规则 96 以归约 (unary_op)


状态 81

   26 instruction: '[' expression . ',' expression ']' ":=" expression
   42 expression: expression . binary_op atom_expression

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ','    偏移，并进入状态 116
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 82

   41 expression: atom_expression .

    $default  使用规则 41 以归约 (expression)


状态 83

   43 atom_expression: literal .

    $default  使用规则 43 以归约 (atom_expression)


状态 84

   60 literal: builtin_field .

    $default  使用规则 60 以归约 (literal)


状态 85

   44 atom_expression: unary_op . atom_expression

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    atom_expression  转到状态 133
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 86

   59 literal: jsil_type .

    $default  使用规则 59 以归约 (literal)


状态 87

  105 jsil_type: ref_type .

    $default  使用规则 105 以归约 (jsil_type)


状态 88

    4 procedure_decl: "procedure" proc_ident '(' parameters_opt ')' "returns" TOK_IDENTIFIER "to" TOK_IDENTIFIER "throws" TOK_IDENTIFIER "to" TOK_IDENTIFIER '{' statements_opt '}' .

    $default  使用规则 4 以归约 (procedure_decl)


状态 89

   18 statements: statements statement .

    $default  使用规则 18 以归约 (statements)


状态 90

   20 statement: instruction "<newline>" .

    $default  使用规则 20 以归约 (statement)


状态 91

   23 instruction: "goto" '[' expression . ']' TOK_IDENTIFIER ',' TOK_IDENTIFIER
   42 expression: expression . binary_op atom_expression

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ']'    偏移，并进入状态 134
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 92

   29 rhs: "new" . '(' ')'

    '('  偏移，并进入状态 135


状态 93

   30 rhs: "hasField" . '(' expression ',' expression ')'

    '('  偏移，并进入状态 136


状态 94

   32 rhs: "delete" . '(' expression ',' expression ')'

    '('  偏移，并进入状态 137


状态 95

   33 rhs: "protoField" . '(' expression ',' expression ')'

    '('  偏移，并进入状态 138


状态 96

   34 rhs: "protoObj" . '(' expression ',' expression ')'

    '('  偏移，并进入状态 139


状态 97

    5 proc_ident: TOK_IDENTIFIER .
   50 literal: TOK_IDENTIFIER .

    '('       使用规则 5 以归约 (proc_ident)
    $default  使用规则 50 以归约 (literal)


状态 98

   10 proc_ident_expr: TOK_STRING .
   57 literal: TOK_STRING .

    '('       使用规则 10 以归约 (proc_ident_expr)
    $default  使用规则 57 以归约 (literal)


状态 99

   31 rhs: '[' . expression ',' expression ']'

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 140
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 100

    9 proc_ident_expr: proc_ident .

    $default  使用规则 9 以归约 (proc_ident_expr)


状态 101

   28 rhs: proc_ident_expr . '(' expressions_opt ')' with_opt

    '('  偏移，并进入状态 141


状态 102

   25 instruction: TOK_IDENTIFIER ":=" rhs .

    $default  使用规则 25 以归约 (instruction)


状态 103

   27 rhs: expression .
   42 expression: expression . binary_op atom_expression

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    $default  使用规则 27 以归约 (rhs)

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 104

   46 atom_expression: "ref" '(' . expression ',' expression ',' ref_type ')'

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 142
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 105

   47 atom_expression: "field" '(' . expression ')'

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 143
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 106

   48 atom_expression: "base" '(' . expression ')'

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 144
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 107

   49 atom_expression: "typeOf" '(' . expression ')'

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 145
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 108

   42 expression: expression . binary_op atom_expression
   45 atom_expression: '(' expression . ')'

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ')'    偏移，并进入状态 146
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 109

   74 compare_op: "<=" .

    $default  使用规则 74 以归约 (compare_op)


状态 110

   80 boolean_op: "and" .

    $default  使用规则 80 以归约 (boolean_op)


状态 111

   81 boolean_op: "or" .

    $default  使用规则 81 以归约 (boolean_op)


状态 112

   82 boolean_op: "<:" .

    $default  使用规则 82 以归约 (boolean_op)


状态 113

   87 bitwise_op: "<<" .

    $default  使用规则 87 以归约 (bitwise_op)


状态 114

   88 bitwise_op: ">>" .

    $default  使用规则 88 以归约 (bitwise_op)


状态 115

   89 bitwise_op: ">>>" .

    $default  使用规则 89 以归约 (bitwise_op)


状态 116

   26 instruction: '[' expression ',' . expression ']' ":=" expression

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 147
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 117

   72 compare_op: '=' .

    $default  使用规则 72 以归约 (compare_op)


状态 118

   73 compare_op: '<' .

    $default  使用规则 73 以归约 (compare_op)


状态 119

   75 arithmetic_op: '+' .

    $default  使用规则 75 以归约 (arithmetic_op)


状态 120

   76 arithmetic_op: '-' .

    $default  使用规则 76 以归约 (arithmetic_op)


状态 121

   77 arithmetic_op: '*' .

    $default  使用规则 77 以归约 (arithmetic_op)


状态 122

   78 arithmetic_op: '/' .

    $default  使用规则 78 以归约 (arithmetic_op)


状态 123

   79 arithmetic_op: '%' .

    $default  使用规则 79 以归约 (arithmetic_op)


状态 124

   83 boolean_op: ':' .

    $default  使用规则 83 以归约 (boolean_op)


状态 125

   84 bitwise_op: '&' .

    $default  使用规则 84 以归约 (bitwise_op)


状态 126

   85 bitwise_op: '|' .

    $default  使用规则 85 以归约 (bitwise_op)


状态 127

   86 bitwise_op: '^' .

    $default  使用规则 86 以归约 (bitwise_op)


状态 128

   42 expression: expression binary_op . atom_expression

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    atom_expression  转到状态 148
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 129

   68 binary_op: compare_op .

    $default  使用规则 68 以归约 (binary_op)


状态 130

   69 binary_op: arithmetic_op .

    $default  使用规则 69 以归约 (binary_op)


状态 131

   70 binary_op: boolean_op .

    $default  使用规则 70 以归约 (binary_op)


状态 132

   71 binary_op: bitwise_op .

    $default  使用规则 71 以归约 (binary_op)


状态 133

   44 atom_expression: unary_op atom_expression .

    $default  使用规则 44 以归约 (atom_expression)


状态 134

   23 instruction: "goto" '[' expression ']' . TOK_IDENTIFIER ',' TOK_IDENTIFIER

    TOK_IDENTIFIER  偏移，并进入状态 149


状态 135

   29 rhs: "new" '(' . ')'

    ')'  偏移，并进入状态 150


状态 136

   30 rhs: "hasField" '(' . expression ',' expression ')'

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 151
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 137

   32 rhs: "delete" '(' . expression ',' expression ')'

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 152
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 138

   33 rhs: "protoField" '(' . expression ',' expression ')'

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 153
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 139

   34 rhs: "protoObj" '(' . expression ',' expression ')'

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 154
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 140

   31 rhs: '[' expression . ',' expression ']'
   42 expression: expression . binary_op atom_expression

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ','    偏移，并进入状态 155
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 141

   28 rhs: proc_ident_expr '(' . expressions_opt ')' with_opt

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    $default  使用规则 37 以归约 (expressions_opt)

    expressions_opt  转到状态 156
    expressions      转到状态 157
    expression       转到状态 158
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 142

   42 expression: expression . binary_op atom_expression
   46 atom_expression: "ref" '(' expression . ',' expression ',' ref_type ')'

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ','    偏移，并进入状态 159
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 143

   42 expression: expression . binary_op atom_expression
   47 atom_expression: "field" '(' expression . ')'

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ')'    偏移，并进入状态 160
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 144

   42 expression: expression . binary_op atom_expression
   48 atom_expression: "base" '(' expression . ')'

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ')'    偏移，并进入状态 161
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 145

   42 expression: expression . binary_op atom_expression
   49 atom_expression: "typeOf" '(' expression . ')'

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ')'    偏移，并进入状态 162
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 146

   45 atom_expression: '(' expression ')' .

    $default  使用规则 45 以归约 (atom_expression)


状态 147

   26 instruction: '[' expression ',' expression . ']' ":=" expression
   42 expression: expression . binary_op atom_expression

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ']'    偏移，并进入状态 163
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 148

   42 expression: expression binary_op atom_expression .

    $default  使用规则 42 以归约 (expression)


状态 149

   23 instruction: "goto" '[' expression ']' TOK_IDENTIFIER . ',' TOK_IDENTIFIER

    ','  偏移，并进入状态 164


状态 150

   29 rhs: "new" '(' ')' .

    $default  使用规则 29 以归约 (rhs)


状态 151

   30 rhs: "hasField" '(' expression . ',' expression ')'
   42 expression: expression . binary_op atom_expression

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ','    偏移，并进入状态 165
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 152

   32 rhs: "delete" '(' expression . ',' expression ')'
   42 expression: expression . binary_op atom_expression

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ','    偏移，并进入状态 166
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 153

   33 rhs: "protoField" '(' expression . ',' expression ')'
   42 expression: expression . binary_op atom_expression

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ','    偏移，并进入状态 167
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 154

   34 rhs: "protoObj" '(' expression . ',' expression ')'
   42 expression: expression . binary_op atom_expression

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ','    偏移，并进入状态 168
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 155

   31 rhs: '[' expression ',' . expression ']'

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 169
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 156

   28 rhs: proc_ident_expr '(' expressions_opt . ')' with_opt

    ')'  偏移，并进入状态 170


状态 157

   38 expressions_opt: expressions .
   40 expressions: expressions . ',' expression

    ','  偏移，并进入状态 171

    $default  使用规则 38 以归约 (expressions_opt)


状态 158

   39 expressions: expression .
   42 expression: expression . binary_op atom_expression

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    $default  使用规则 39 以归约 (expressions)

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 159

   46 atom_expression: "ref" '(' expression ',' . expression ',' ref_type ')'

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 172
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 160

   47 atom_expression: "field" '(' expression ')' .

    $default  使用规则 47 以归约 (atom_expression)


状态 161

   48 atom_expression: "base" '(' expression ')' .

    $default  使用规则 48 以归约 (atom_expression)


状态 162

   49 atom_expression: "typeOf" '(' expression ')' .

    $default  使用规则 49 以归约 (atom_expression)


状态 163

   26 instruction: '[' expression ',' expression ']' . ":=" expression

    ":="  偏移，并进入状态 173


状态 164

   23 instruction: "goto" '[' expression ']' TOK_IDENTIFIER ',' . TOK_IDENTIFIER

    TOK_IDENTIFIER  偏移，并进入状态 174


状态 165

   30 rhs: "hasField" '(' expression ',' . expression ')'

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 175
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 166

   32 rhs: "delete" '(' expression ',' . expression ')'

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 176
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 167

   33 rhs: "protoField" '(' expression ',' . expression ')'

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 177
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 168

   34 rhs: "protoObj" '(' expression ',' . expression ')'

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 178
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 169

   31 rhs: '[' expression ',' expression . ']'
   42 expression: expression . binary_op atom_expression

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ']'    偏移，并进入状态 179
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 170

   28 rhs: proc_ident_expr '(' expressions_opt ')' . with_opt

    "with"  偏移，并进入状态 180

    $default  使用规则 35 以归约 (with_opt)

    with_opt  转到状态 181


状态 171

   40 expressions: expressions ',' . expression

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 182
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 172

   42 expression: expression . binary_op atom_expression
   46 atom_expression: "ref" '(' expression ',' expression . ',' ref_type ')'

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ','    偏移，并进入状态 183
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 173

   26 instruction: '[' expression ',' expression ']' ":=" . expression

    "ref"                 偏移，并进入状态 42
    "field"               偏移，并进入状态 43
    "base"                偏移，并进入状态 44
    "typeOf"              偏移，并进入状态 45
    "null"                偏移，并进入状态 46
    "#undefined"          偏移，并进入状态 47
    "#empty"              偏移，并进入状态 48
    "true"                偏移，并进入状态 49
    "false"               偏移，并进入状态 50
    "#proto"              偏移，并进入状态 51
    "#fid"                偏移，并进入状态 52
    "#scope"              偏移，并进入状态 53
    "#constructid"        偏移，并进入状态 54
    "#primvalue"          偏移，并进入状态 55
    "#targetfunction"     偏移，并进入状态 56
    "#class"              偏移，并进入状态 57
    "num_to_string"       偏移，并进入状态 58
    "string_to_num"       偏移，并进入状态 59
    "num_to_int32"        偏移，并进入状态 60
    "num_to_uint32"       偏移，并进入状态 61
    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63
    "#Null"               偏移，并进入状态 64
    "#Undefined"          偏移，并进入状态 65
    "#Boolean"            偏移，并进入状态 66
    "#String"             偏移，并进入状态 67
    "#Number"             偏移，并进入状态 68
    "#BuiltinObject"      偏移，并进入状态 69
    "#UserObject"         偏移，并进入状态 70
    "#Object"             偏移，并进入状态 71
    "#Reference"          偏移，并进入状态 72
    "not"                 偏移，并进入状态 73
    TOK_IDENTIFIER        偏移，并进入状态 74
    TOK_FLOATING          偏移，并进入状态 75
    TOK_STRING            偏移，并进入状态 76
    TOK_BUILTIN_LOC       偏移，并进入状态 77
    '('                   偏移，并进入状态 78
    '-'                   偏移，并进入状态 79
    '!'                   偏移，并进入状态 80

    expression       转到状态 184
    atom_expression  转到状态 82
    literal          转到状态 83
    builtin_field    转到状态 84
    unary_op         转到状态 85
    jsil_type        转到状态 86
    ref_type         转到状态 87


状态 174

   23 instruction: "goto" '[' expression ']' TOK_IDENTIFIER ',' TOK_IDENTIFIER .

    $default  使用规则 23 以归约 (instruction)


状态 175

   30 rhs: "hasField" '(' expression ',' expression . ')'
   42 expression: expression . binary_op atom_expression

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ')'    偏移，并进入状态 185
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 176

   32 rhs: "delete" '(' expression ',' expression . ')'
   42 expression: expression . binary_op atom_expression

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ')'    偏移，并进入状态 186
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 177

   33 rhs: "protoField" '(' expression ',' expression . ')'
   42 expression: expression . binary_op atom_expression

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ')'    偏移，并进入状态 187
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 178

   34 rhs: "protoObj" '(' expression ',' expression . ')'
   42 expression: expression . binary_op atom_expression

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    ')'    偏移，并进入状态 188
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 179

   31 rhs: '[' expression ',' expression ']' .

    $default  使用规则 31 以归约 (rhs)


状态 180

   36 with_opt: "with" . TOK_IDENTIFIER

    TOK_IDENTIFIER  偏移，并进入状态 189


状态 181

   28 rhs: proc_ident_expr '(' expressions_opt ')' with_opt .

    $default  使用规则 28 以归约 (rhs)


状态 182

   40 expressions: expressions ',' expression .
   42 expression: expression . binary_op atom_expression

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    $default  使用规则 40 以归约 (expressions)

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 183

   46 atom_expression: "ref" '(' expression ',' expression ',' . ref_type ')'

    "#MemberReference"    偏移，并进入状态 62
    "#VariableReference"  偏移，并进入状态 63

    ref_type  转到状态 190


状态 184

   26 instruction: '[' expression ',' expression ']' ":=" expression .
   42 expression: expression . binary_op atom_expression

    "<="   偏移，并进入状态 109
    "and"  偏移，并进入状态 110
    "or"   偏移，并进入状态 111
    "<:"   偏移，并进入状态 112
    "<<"   偏移，并进入状态 113
    ">>"   偏移，并进入状态 114
    ">>>"  偏移，并进入状态 115
    '='    偏移，并进入状态 117
    '<'    偏移，并进入状态 118
    '+'    偏移，并进入状态 119
    '-'    偏移，并进入状态 120
    '*'    偏移，并进入状态 121
    '/'    偏移，并进入状态 122
    '%'    偏移，并进入状态 123
    ':'    偏移，并进入状态 124
    '&'    偏移，并进入状态 125
    '|'    偏移，并进入状态 126
    '^'    偏移，并进入状态 127

    $default  使用规则 26 以归约 (instruction)

    binary_op      转到状态 128
    compare_op     转到状态 129
    arithmetic_op  转到状态 130
    boolean_op     转到状态 131
    bitwise_op     转到状态 132


状态 185

   30 rhs: "hasField" '(' expression ',' expression ')' .

    $default  使用规则 30 以归约 (rhs)


状态 186

   32 rhs: "delete" '(' expression ',' expression ')' .

    $default  使用规则 32 以归约 (rhs)


状态 187

   33 rhs: "protoField" '(' expression ',' expression ')' .

    $default  使用规则 33 以归约 (rhs)


状态 188

   34 rhs: "protoObj" '(' expression ',' expression ')' .

    $default  使用规则 34 以归约 (rhs)


状态 189

   36 with_opt: "with" TOK_IDENTIFIER .

    $default  使用规则 36 以归约 (with_opt)


状态 190

   46 atom_expression: "ref" '(' expression ',' expression ',' ref_type . ')'

    ')'  偏移，并进入状态 191


状态 191

   46 atom_expression: "ref" '(' expression ',' expression ',' ref_type ')' .

    $default  使用规则 46 以归约 (atom_expression)
